/*
1247. 交换字符使得字符串相同
有两个长度相同的字符串 s1 和 s2，且它们其中 只含有 字符 "x" 和 "y"，
你需要通过「交换字符」的方式使这两个字符串相同。每次「交换字符」的时
候，你都可以在两个字符串中各选一个字符进行交换。
交换只能发生在两个不同的字符串之间，绝对不能发生在同一个字符串内部。
也就是说，我们可以交换 s1[i] 和 s2[j]，但不能交换 s1[i] 和 s1[j]。
最后，请你返回使 s1 和 s2 相同的最小交换次数，如果没有方法能够使得
这两个字符串相同，则返回 -1 。 

示例 1：

输入：s1 = "xx", s2 = "yy"
输出：1
解释：
交换 s1[0] 和 s2[1]，得到 s1 = "yx"，s2 = "yx"。
示例 2：

输入：s1 = "xy", s2 = "yx"
输出：2
解释：
交换 s1[0] 和 s2[0]，得到 s1 = "yy"，s2 = "xx" 。
交换 s1[0] 和 s2[1]，得到 s1 = "xy"，s2 = "xy" 。
注意，你不能交换 s1[0] 和 s1[1] 使得 s1 变成 "yx"，因为我们只能交换属于两个不同字符串的字符。
示例 3：

输入：s1 = "xx", s2 = "xy"
输出：-1
示例 4：

输入：s1 = "xxyyxyxyxx", s2 = "xyyxyxxxyx"
输出：4
 

提示：

1 <= s1.length, s2.length <= 1000
s1, s2 只包含 'x' 或 'y'。

来源：LeetCode
链接：https://leetcode-cn.com/problems/minimum-swaps-to-make-strings-equal/
*/
/*
首先遍历字符串，两字符串比较，如果上次相等，那这个位置就不用交换，统计不相等位置的x和y的个数
我们来试想下，x+y的得和一定是个偶数，且必须满足同奇同偶，才有可能相等，举个例子
xxy
yyx
这种情况下，不管怎么交换，都不可能相等。
第一种情况，奇数
xy
yx
第二种情况，偶数
xyxy
yxyx
这也只需要两次，
也就是每存在偶数个这个除2就可以，如果是奇数的话，加上，第一种情况的两个就可以
*/
class Solution {
public:
    int minimumSwap(string s1, string s2) {
        int x = 0, y = 0;
        
        for(int i = 0; i < s1.size(); ++i)
        {
            if(s1[i] != s2[i])
            {
                if(s1[i] == 'x')
                    ++x;
                else
                    ++y;
            }
        }
        
        if(x % 2 == 0 && y % 2 == 0) //同偶
            return (x + y) / 2;
        else if(x % 2 == 1 && y % 2 == 1)
            return (x - 1) / 2 + (y - 1) / 2 + 2;
        else
            return -1;
             
    }
};